{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAM,eAAe,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;AAEnD,IAAI,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC;AACzB,YAAS,eAAe;;;;AAKxB,MAAK,EAAC,iBAAG;AACR,MAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACpB,UAAO;GACP;AACD,MAAI,GAAG,GAAG,IAAI,CAAC;AACf,MAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;AAC3B,MAAG,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;GAC/B,MAAM;AACN,MAAG,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;GACpD;AACD,MAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC9B,KAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACvB,KAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,MAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EAC5B;;AAED,WAAU,EAAA,sBAAG;AACZ,MAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,MAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EAC7B;;AAED,UAAS,EAAA,qBAAG;AACX,MAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAC5B;;AAGD,OAAM,EAAA,gBAAC,GAAG,EAAE;AACX,MAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;EACrB;CACD,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const Car = require('Car');\nconst ObstacleManager = require(\"ObstacleManager\");\n\nvar CarManager = cc.Class({\n\textends: ObstacleManager,\n\t\n\n\t/*Implements abstract methods*/\n\n\tspawn () {\n\t\tif (!this.isRunning) {\n\t\t\treturn;\n\t\t}\n\t\tlet car = null;\n\t\tif (cc.pool.hasObject(Car)) {\n\t\t\tcar = cc.pool.getFromPool(Car);\n\t\t} else {\n\t\t\tcar = cc.instantiate(this.prefab).getComponent(Car);\n\t\t}\n\t\tthis.layer.addChild(car.node);\n\t\tcar.node.active = true;\n\t\tcar.init(this);\n\t\tthis.obstacleList.push(car);\n\t},\n\n\tstartSpawn() {\n\t\tthis.isRunning = true;\n\t\tthis.schedule(this.spawn, 3);\n\t},\n\n\tstopSpawn() {\n\t\tthis.unschedule(this.spawn);\n\t},\n\n\n\tcarHit(car) {\n\t\tthis.game.gameOver();\n\t},\n});\n"
  ]
}